version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - proxy
    restart: always
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: frontend_prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${PROD_API_URL}
      - VITE_DOCS_URL=${PROD_DOCS_URL}
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  proxy:
    build:
      context: ./backend
      dockerfile: Dockerfile.proxy
    container_name: proxy_prod
    environment:
      - NODE_ENV=production
      - PORT=8888
    ports:
      - "8888:8888"
    depends_on:
      - api
      - docs
      - main
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${PROD_DATABASE_URL}
      - REDIS_URL=${PROD_REDIS_URL}
      - JWT_SECRET=${PROD_JWT_SECRET}
      - JWT_REFRESH_SECRET=${PROD_JWT_REFRESH_SECRET}
      - GOOGLE_CLIENT_ID=${PROD_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${PROD_GOOGLE_CLIENT_SECRET}
      - GOOGLE_CREDENTIALS=${PROD_GOOGLE_CREDENTIALS}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs/api:/app/logs
      - ./uploads:/app/uploads
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  docs:
    build:
      context: ./backend
      dockerfile: Dockerfile.docs
    environment:
      - NODE_ENV=production
      - GOOGLE_CLIENT_ID=${PROD_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${PROD_GOOGLE_CLIENT_SECRET}
      - GOOGLE_CREDENTIALS=${PROD_GOOGLE_CREDENTIALS}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/docs:/app/logs
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  main:
    build:
      context: ./backend
      dockerfile: Dockerfile.main
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${PROD_DATABASE_URL}
      - REDIS_URL=${PROD_REDIS_URL}
    volumes:
      - ./logs/main:/app/logs
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres:
    image: postgres:15-alpine
    container_name: postgres_prod
    environment:
      - POSTGRES_DB=${PROD_DB_NAME}
      - POSTGRES_USER=${PROD_DB_USER}
      - POSTGRES_PASSWORD=${PROD_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: always
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: redis_prod
    command: redis-server --appendonly yes --requirepass ${PROD_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: always
    networks:
      - app_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Blue-Green Deployment Support
  frontend_green:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${PROD_API_URL}
      - VITE_DOCS_URL=${PROD_DOCS_URL}
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    profiles:
      - green

  api_green:
    build:
      context: ./backend
      dockerfile: Dockerfile.api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${PROD_DATABASE_URL}
      - REDIS_URL=${PROD_REDIS_URL}
      - JWT_SECRET=${PROD_JWT_SECRET}
      - JWT_REFRESH_SECRET=${PROD_JWT_REFRESH_SECRET}
      - GOOGLE_CLIENT_ID=${PROD_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${PROD_GOOGLE_CLIENT_SECRET}
      - GOOGLE_CREDENTIALS=${PROD_GOOGLE_CREDENTIALS}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs/api:/app/logs
      - ./uploads:/app/uploads
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    profiles:
      - green

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - app_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_prod
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    networks:
      - app_network
    profiles:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager_prod
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: always
    networks:
      - app_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  app_network:
    driver: bridge