# ElementMedica 2.0 - Docker Compose Startup
# Configurazione ottimizzata per budget startup (2GB RAM)
# Costo target: â‚¬4.78/mese

version: '3.8'

services:
  # API Server - Core business logic
  api-server:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        NODE_ENV: production
    container_name: elementmedica-api
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=production
      - PORT=4001
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - REFRESH_TOKEN_EXPIRES_IN=7d
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Proxy Server - Routing e CORS
  proxy-server:
    build:
      context: .
      dockerfile: backend/proxy/Dockerfile
      args:
        NODE_ENV: production
    container_name: elementmedica-proxy
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=production
      - PORT=4003
      - API_SERVER_URL=http://api-server:4001
      - FRONTEND_URL=https://${DOMAIN:-localhost}
      - CORS_ORIGIN=https://${DOMAIN:-localhost}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    depends_on:
      - api-server
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache - Ottimizzato per 2GB RAM
  redis:
    image: redis:7-alpine
    container_name: elementmedica-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx - Reverse proxy e static files
  nginx:
    image: nginx:alpine
    container_name: elementmedica-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/startup.conf:/etc/nginx/conf.d/default.conf
      - ./dist:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - proxy-server
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus - Monitoring leggero
  prometheus:
    image: prom/prometheus:latest
    container_name: elementmedica-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/startup.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=500MB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - monitoring

  # Node Exporter - Metriche sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: elementmedica-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.1'
        reservations:
          memory: 16M
          cpus: '0.05'
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  default:
    name: elementmedica-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configurazione per sviluppo locale
# docker-compose -f docker-compose.startup.yml up -d

# Configurazione per produzione con monitoring
# docker-compose -f docker-compose.startup.yml --profile monitoring up -d

# Configurazione per produzione senza monitoring (risparmio risorse)
# docker-compose -f docker-compose.startup.yml up -d api-server proxy-server redis nginx